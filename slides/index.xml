<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Slides on Natalie Chin</title>
    <link>https://natchineth.com/slides/</link>
    <description>Recent content in Slides on Natalie Chin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 03 Oct 2019 19:26:39 -0400</lastBuildDate>
    
	<atom:link href="https://natchineth.com/slides/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hacking Imposter Syndrome</title>
      <link>https://natchineth.com/slides/hacking-imposter-syndrome/</link>
      <pubDate>Thu, 03 Oct 2019 19:26:39 -0400</pubDate>
      
      <guid>https://natchineth.com/slides/hacking-imposter-syndrome/</guid>
      <description>class: title
Hacking Imposter Syndrome Natalie Chin About Me  Blockchain Professor at George Brown College Former Blockchain Developer at STK Former Software Developer at Intelliware Nerd  &amp;ldquo;Imposter Syndrome&amp;rdquo;  Feeling that someone else will find out we&amp;rsquo;re a fraud Any successes were due to luck  class: middle center Why this topic?  Increasing percentage of people talking about Imposter Syndrome Not enough discussion about how to actual deal with it &amp;mdash; class: img-caption  Background  Network Engineer Took apart hard drives for fun Fast typer  class: img-caption</description>
    </item>
    
    <item>
      <title>Case Study of Audits</title>
      <link>https://natchineth.com/slides/adv-sc/study-of-audits/</link>
      <pubDate>Tue, 25 Sep 2018 16:43:02 -0400</pubDate>
      
      <guid>https://natchineth.com/slides/adv-sc/study-of-audits/</guid>
      <description>class: title
Case Study of Audits Agenda  Audits  Code Security Design Decisions and Architecture Code Quality  Competition: Case Study of Contracts  Goals of an Audit  Code Security Code Architecture Code Quality  Audit Process Auditing Companies  Quantstamp Trail of Bits ChainSecurity Hosho Open Zeppelin  Audit Handoff  Most recent version of code Explanation of how code is supposed to work Description of particular areas of code that are complex  class: title</description>
    </item>
    
    <item>
      <title>Hands on State Channel</title>
      <link>https://natchineth.com/slides/adv-sc/intro-to-state-channel/</link>
      <pubDate>Tue, 25 Sep 2018 16:43:02 -0400</pubDate>
      
      <guid>https://natchineth.com/slides/adv-sc/intro-to-state-channel/</guid>
      <description>class: title
Introduction to State Channels Outline  &amp;ldquo;State&amp;rdquo; and the concept of state Blockchain vs Centralized Solutions Role o Smart Contract What goes on-chain and stays off-chain  class: title
State class: img-caption
State are (Heads, Tails) usually maps to one person (Winning, Losing)
class: img-caption State in a Tic Tac Toe game can be [Started, Playing, Won, Loss, Tie]
State Channel Characteristics  Members allowed to interact with it Rules of the game Changing of state Disputing changing state  class: title</description>
    </item>
    
    <item>
      <title>Hands on State Channels</title>
      <link>https://natchineth.com/slides/adv-sc/hands-on-state-channel/</link>
      <pubDate>Tue, 25 Sep 2018 16:43:02 -0400</pubDate>
      
      <guid>https://natchineth.com/slides/adv-sc/hands-on-state-channel/</guid>
      <description>class: title
Hands on State Channels Agenda  State Channel Review Defining State Adding Rules Adding Members Escrow Signing  class: title
State Channel Review Defining State  Definition - What is State? Different methods of representing state &amp;mdash; class: title  Demo: Adding State to Contract Exercise - Adding State We&amp;rsquo;re going to build the state channel that you architected last time.
Implement the following: - Initialization of State - Ability to change state</description>
    </item>
    
    <item>
      <title>Testing - Mocha and Asserts</title>
      <link>https://natchineth.com/slides/dp/testing-mocha-asserts/</link>
      <pubDate>Tue, 25 Sep 2018 16:43:02 -0400</pubDate>
      
      <guid>https://natchineth.com/slides/dp/testing-mocha-asserts/</guid>
      <description>class: title
Testing: Mocha and Asserts Agenda  Mocha Basics Chai Basics Introduction to Web3 More in depth: Testing Smart Contracts  Mocha Basics Introduction  Mocha is used for setting up tests Embark and Truffle have Mocha built in  Mocha Hooks  suite callbacks (describe, contract) before hook [suite] beforeEach [test] test callbacks (it) afterEach [test] after hook [suite]  Mocha Async  For async callbacks, you can use the keyword done() Using done twice will error out A lot of calls in smart contracts are asynchronous Mocha can be used with promises, async/await, done, and callbacks  Chai Basics  Test Driven Development - assert  Behaviour Driven Development - expect, should   Chai Basics Assert assert (expression, message);  The expression above should evaluate to something that is true or false.</description>
    </item>
    
    <item>
      <title>Testing - Smart Contracts</title>
      <link>https://natchineth.com/slides/dp/testing-smart-contracts/</link>
      <pubDate>Tue, 25 Sep 2018 16:43:02 -0400</pubDate>
      
      <guid>https://natchineth.com/slides/dp/testing-smart-contracts/</guid>
      <description>class: title
Testing Smart Contracts class: left
Agenda  Testing Principles Embark and Mocha Tests Do it yourself  “Testing is the primary purpose of a Smart Contract Developer” Very little time is spent writing code compared to the time writing tests Test Driven Development  Understand the business requirement Created automated tests meeting said requirement Run the test. It should fail. Create code logic implementing the functionality Run the test again.</description>
    </item>
    
    <item>
      <title>WETH</title>
      <link>https://natchineth.com/slides/adv-sc/weth/</link>
      <pubDate>Tue, 25 Sep 2018 16:43:02 -0400</pubDate>
      
      <guid>https://natchineth.com/slides/adv-sc/weth/</guid>
      <description>class: title
WETH Agenda  Study of EVM languages Benefits and drawbacks of such languages Introduction to Wrapped ETH Implementing a Contract Rejecting Tokens  Study of EVM Languages Available Languages on the EVM  Solidity Vyper LLL Flint Yul  Solidity  Most common language Similar to Javascript and C Downsides? Benefits?  Vyper  Second-most popular language after solidity Aimed at being more readable to reduce the chance of bugs  Solidity vs Vyper  No modifiers No inheritance No functional and operational overloading No inline assembly  Yul  Intermediate language that compiles to different EVM Supports switch, function, block, var, literal, loop, if, expression, and variables  LLL  Assembly like code with keywords Manipulation of data and bytes individually &amp;mdash;  Currencies on the Blockchain  Ether ERC20 Tokens Multitude of other standardized tokens  What are the differences and similarities betwen ETH and other tokens?</description>
    </item>
    
    <item>
      <title>Deep Dive Into Solidity</title>
      <link>https://natchineth.com/slides/sc-essentials/deep-dive-into-solidity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://natchineth.com/slides/sc-essentials/deep-dive-into-solidity/</guid>
      <description>class: title
Deep Dive Into Solidity Agenda  Brief Review of Solidity Mapping Structs Enums Events  class: title
Solidity Review Default Types  uint bytes string boolean mapping  ### Control Structures
 Modifiers Functions If statements Require statements  Property of Solidity Functions  public private return value use of modifiers  Purpose of Modifiers  providing access control for functions  Mappings  allow developers to &amp;ldquo;map&amp;rdquo; a unique identifier to x x can be of any type useful for uniquely identifying users in smart contract always of the form {key: value} pair  key is always unique value is always contains information mapping to a respective key   Mappings - An Example { key: value }</description>
    </item>
    
    <item>
      <title>Inheritance</title>
      <link>https://natchineth.com/slides/sc-essentials/inheritance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://natchineth.com/slides/sc-essentials/inheritance/</guid>
      <description>class: title
Smart Contract Inheritance class: left background-image: url(bg.jpeg)
Agenda  Contract Inheritance Abstract Classes Interfaces  background-image: url(bg.jpeg)
Contract Inheritance  Contract inheriting from another contract Two different kinds - abstract and interface Inheritance is useful for code that is frequently used Allows a single contract to be deployed and used by many other contracts Separation of concerns in actual contract logic and contract that&amp;rsquo;s using it  background-image: url(bg.</description>
    </item>
    
    <item>
      <title>Vyper</title>
      <link>https://natchineth.com/slides/sc-essentials/vyper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://natchineth.com/slides/sc-essentials/vyper/</guid>
      <description>class: title
Vyper background-image: url(bg.jpeg)
Agenda  Course Expectations Vyper Types Using Vyper Structures Comparing and Contrasting Vyper and Solidity  background-image: url(bg.jpeg)
Course Expectations  All course submissions are subject to the Plagiarism Academic Honesty at George Brown College In addition to copying from the internet, this includes lecture slides and all code demos that are provided by professors Plaigiarized assignments will be given a mark of 0%  background-image: url(bg.</description>
    </item>
    
  </channel>
</rss>