<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Slides on Natalie Chin</title>
    <link>https://nataliechin80.github.io/slides/</link>
    <description>Recent content in Slides on Natalie Chin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 25 Sep 2018 16:43:02 -0400</lastBuildDate>
    
	<atom:link href="https://nataliechin80.github.io/slides/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Case Study of Audits</title>
      <link>https://nataliechin80.github.io/slides/adv-sc/study-of-audits/</link>
      <pubDate>Tue, 25 Sep 2018 16:43:02 -0400</pubDate>
      
      <guid>https://nataliechin80.github.io/slides/adv-sc/study-of-audits/</guid>
      <description>Case Study of Audits Agenda  Audits  Code Security Design Decisions and Architecture Code Quality  Competition: Case Study of Contracts  Goals of an Audit  Code Security Code Architecture Code Quality  Audit Process Auditing Companies  Quantstamp Trail of Bits ChainSecurity Hosho Open Zeppelin  Audit Handoff  Most recent version of code Explanation of how code is supposed to work Description of particular areas of code that are complex  Source Code: ZIP file on Blackboard Exercise - Introduction to Code Throughout this lecture, we will be facilitating an end-to-end audit of this audit code in production.</description>
    </item>
    
    <item>
      <title>Testing - Mocha and Asserts</title>
      <link>https://nataliechin80.github.io/slides/dp/testing-mocha-asserts/</link>
      <pubDate>Tue, 25 Sep 2018 16:43:02 -0400</pubDate>
      
      <guid>https://nataliechin80.github.io/slides/dp/testing-mocha-asserts/</guid>
      <description>Testing: Mocha and Asserts background-image: url(bg.jpeg)
Agenda  Mocha Basics Chai Basics Introduction to Web3 More in depth: Testing Smart Contracts  background-image: url(bg.jpeg)
Mocha Basics Introduction  Mocha is used for setting up tests Embark and Truffle have Mocha built in  background-image: url(bg.jpeg)
Mocha Hooks  suite callbacks (describe, contract) before hook [suite] beforeEach [test] test callbacks (it) afterEach [test] after hook [suite]  background-image: url(bg.jpeg)
Mocha Async  For async callbacks, you can use the keyword done() Using done twice will error out A lot of calls in smart contracts are asynchronous Mocha can be used with promises, async/await, done, and callbacks  background-image: url(bg.</description>
    </item>
    
    <item>
      <title>Testing - Smart Contracts</title>
      <link>https://nataliechin80.github.io/slides/dp/testing-smart-contracts/</link>
      <pubDate>Tue, 25 Sep 2018 16:43:02 -0400</pubDate>
      
      <guid>https://nataliechin80.github.io/slides/dp/testing-smart-contracts/</guid>
      <description>Testing Smart Contracts class: left background-image: url(bg.jpeg)
Agenda  Testing Principles Embark and Mocha Tests Do it yourself  background-image: url(bg.jpeg)
“Testing is the primary purpose of a Smart Contract Developer” Very little time is spent writing code compared to the time writing tests background-image: url(bg.jpeg)
Test Driven Development  Understand the business requirement Created automated tests meeting said requirement Run the test. It should fail. Create code logic implementing the functionality Run the test again.</description>
    </item>
    
    <item>
      <title>WETH</title>
      <link>https://nataliechin80.github.io/slides/adv-sc/weth/</link>
      <pubDate>Tue, 25 Sep 2018 16:43:02 -0400</pubDate>
      
      <guid>https://nataliechin80.github.io/slides/adv-sc/weth/</guid>
      <description>WETH Agenda  Study of EVM languages Benefits and drawbacks of such languages Introduction to Wrapped ETH Implementing a Contract Rejecting Tokens  Study of EVM Languages Available Languages on the EVM  Solidity Vyper LLL Flint Yul  Solidity  Most common language Similar to Javascript and C Downsides? Benefits?  Vyper  Second-most popular language after solidity Aimed at being more readable to reduce the chance of bugs  Solidity vs Vyper  No modifiers No inheritance No functional and operational overloading No inline assembly  Yul  Intermediate language that compiles to different EVM Supports switch, function, block, var, literal, loop, if, expression, and variables  LLL  Assembly like code with keywords Manipulation of data and bytes individually &amp;mdash;  Currencies on the Blockchain  Ether ERC20 Tokens Multitude of other standardized tokens  What are the differences and similarities betwen ETH and other tokens?</description>
    </item>
    
    <item>
      <title>Deep Dive Into Solidity</title>
      <link>https://nataliechin80.github.io/slides/sc-essentials/deep-dive-into-solidity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://nataliechin80.github.io/slides/sc-essentials/deep-dive-into-solidity/</guid>
      <description>Deep Dive Into Solidity background-image: url(../.bg.jpeg)
Agenda  Brief Review of Solidity Mapping Structs Enums Events  background-image: url(../.bg.jpeg) class: center, middle
Solidity Review background-image: url(../.bg.jpeg)
Default Types  uint bytes string boolean mapping  background-image: url(../.bg.jpeg)
### Control Structures
 Modifiers Functions If statements Require statements  background-image: url(../.bg.jpeg)
Property of Solidity Functions  public private return value use of modifiers  Purpose of Modifiers  providing access control for functions  background-image: url(.</description>
    </item>
    
    <item>
      <title>Inheritance</title>
      <link>https://nataliechin80.github.io/slides/sc-essentials/inheritance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://nataliechin80.github.io/slides/sc-essentials/inheritance/</guid>
      <description>Smart Contract Inheritance class: left background-image: url(bg.jpeg)
Agenda  Contract Inheritance Abstract Classes Interfaces  background-image: url(bg.jpeg)
Contract Inheritance  Contract inheriting from another contract Two different kinds - abstract and interface Inheritance is useful for code that is frequently used Allows a single contract to be deployed and used by many other contracts Separation of concerns in actual contract logic and contract that&amp;rsquo;s using it  background-image: url(bg.jpeg)</description>
    </item>
    
    <item>
      <title>Vyper</title>
      <link>https://nataliechin80.github.io/slides/sc-essentials/vyper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://nataliechin80.github.io/slides/sc-essentials/vyper/</guid>
      <description>Vyper class: left background-image: url(bg.jpeg)
Agenda  Course Expectations Vyper Types Using Vyper Structures Comparing and Contrasting Vyper and Solidity  background-image: url(bg.jpeg) class: center, middle
Course Expectations  All course submissions are subject to the Plagiarism Academic Honesty at George Brown College In addition to copying from the internet, this includes lecture slides and all code demos that are provided by professors Plaigiarized assignments will be given a mark of 0%  background-image: url(bg.</description>
    </item>
    
  </channel>
</rss>